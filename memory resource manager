#pragma once
#include<vector>
#include<memory>

template<typename t>
class resource_mngr
{
private:

	std::vector<std::shared_ptr<t>> stuff;

public:

	template<typename u>
	std::shared_ptr<t> allocate(u a)
	{
		for (int i = 0; i != stuff.size(); ++i)
		{
			if (stuff[i].use_count() == 1)
			{
				stuff[i].reset(new u(a));
				return stuff[i];
			}
		}
		stuff.push_back(std::shared_ptr<t>(new u(a)));
		return stuff[stuff.size() - 1];
	}

};
